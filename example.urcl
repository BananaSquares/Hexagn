BITS == 32
MINHEAP 4096
MINSTACK 1024
MOV R1 SP


CAL ._Hx4maini8
MOV SP R1
HLT

._Hx7printlnvs
PSH R1
MOV R1 SP

LLOD R2 R1 2 
.println_loop 
LOD R3 R2 
INC R2 R2 
BRZ .println_end R3 
OUT %TEXT R3 
JMP .println_loop 
.println_end 
OUT %TEXT '\n' 
MOV SP R1
POP R1
RET

._Hx5inputvs
PSH R1
MOV R1 SP

LLOD R3 R1 2 
.input_loop 
IN R2 %TEXT 
BRZ .input_end R2 
STR R3 R2 
INC R3 R3 
JMP .input_loop 
.input_end 
MOV SP R1
POP R1
RET

._Hx4testvi8
PSH R1
MOV R1 SP

// string test = " "; 
MOV R2 .str0
PSH R2

// __urcl__ "LLOD R2 R1 2"; 
LLOD R2 R1 2

// __urcl__ "LLOD R3 R1 -1"; 
LLOD R3 R1 -1

// __urcl__ "ADD R2 R2 0x30"; 
ADD R2 R2 0x30

// __urcl__ "STR R3 R2"; 
STR R3 R2

// println(test); 
LLOD R2 R1 -1
PSH R2
CAL ._Hx7printlnvs
ADD SP SP 1

MOV SP R1
POP R1
RET

._Hx4maini8
PSH R1
MOV R1 SP

// int8 a = 5; 
AND R2 5 0xff
PSH R2

// a = a + 10 * 5; 
LLOD R3 R1 -1
MLT R4 10 5
ADD R2 R3 R4
LSTR R1 -1 R2

// println("Hello, World\nHow are you?"); 
PSH .str1
CAL ._Hx7printlnvs
ADD SP SP 1

// test(5); 
PSH 5
CAL ._Hx4testvi8
ADD SP SP 1

MOV SP R1
POP R1
RET

.str0
DW [ " " 0 ]

.str1
DW [ "Hello, World\nHow are you?" 0 ]

